# コーディングルール

## 1. 開発フロー

### 1.1 コード変更の基本フロー
1. 型定義の作成/更新
2. テストケースの作成
3. 実装
4. レビュー前チェックリスト実行

### 1.2 レビュー前チェックリスト
```bash
# 1. 型チェック
deno check **/*.ts

# 2. リントチェック
deno lint

# 3. フォーマットチェック
deno fmt --check

# 4. テスト実行
deno test
```

### 1.3 コミット前の確認事項
- [ ] 型エラーがないことを確認
- [ ] リントエラーがないことを確認
- [ ] すべてのテストが通過
- [ ] 新規機能の場合、テストカバレッジが十分か確認

## 2. 型安全性の確保

### 2.1 型定義の原則
```typescript
// 必ず型定義から始める
export type RSSFeedContent = {
  title: string;
  link: string;
  items: RSSItem[];
};

// 外部データの型安全性
export function assertIsRSSFeed(data: unknown): asserts data is RSSFeedContent {
  // 型チェックロジック
}
```

### 2.2 型チェックの徹底
- unknown型からの安全な型変換
- 型ガード関数の活用
- 実行時の型チェック

## 3. テスト駆動開発（TDD）

### 3.1 テストファイル構成
```typescript
Deno.test("RSSフィード処理", async (t) => {
  await t.step("パース - 正常系", async () => {
    // 正常系テスト
  });
  
  await t.step("パース - 異常系", async () => {
    // エラーケース
  });
  
  await t.step("キャッシュ - 有効期限", async () => {
    // キャッシュテスト
  });
});
```

### 3.2 テストカバレッジ要件
- ユニットテスト: 90%以上
- 統合テスト: 80%以上
- E2Eテスト: 主要フロー網羅

## 4. エラー処理とロギング

### 4.1 エラーハンドリング
```typescript
export class RSSFetchError extends Error {
  constructor(
    public readonly url: string,
    public readonly statusCode: number,
    message: string,
  ) {
    super(`Failed to fetch RSS from ${url}: ${message}`);
  }
}
```

### 4.2 ログレベル定義
- DEBUG: 開発時のデバッグ情報
- INFO: 重要な処理の開始/完了
- WARN: 処理は継続可能な警告
- ERROR: 重大なエラー

## 5. パフォーマンスとキャッシュ

### 5.1 パフォーマンス要件
- レスポンスタイム: 95%ile < 1000ms
- メモリ使用量: < 512MB
- 同時接続数: 100req/sec

### 5.2 キャッシュ戦略
```typescript
interface CacheConfig {
  maxAge: number;
  staleWhileRevalidate: number;
  maxSize: number;
}

const DEFAULT_CACHE_CONFIG: CacheConfig = {
  maxAge: 3600,
  staleWhileRevalidate: 300,
  maxSize: 1024 * 1024 * 10, // 10MB
};
```

## 6. セキュリティ

### 6.1 入力検証
- URLの検証
- XMLインジェクション対策
- リクエスト制限

### 6.2 出力エスケープ
- HTML/XMLエスケープ
- JSONシリアライズ時の検証

## 7. コードレビュー基準

### 7.1 レビュー必須項目
- [ ] 型定義の適切性
- [ ] テストの十分性
- [ ] エラーハンドリングの完全性
- [ ] パフォーマンスへの影響
- [ ] セキュリティ上の懸念

### 7.2 リファクタリング基準
- 重複コードの排除
- 関数の単一責任
- 適切な抽象化レベル

## 8. デプロイメント

### 8.1 デプロイ前チェックリスト
- [ ] すべてのテストが通過
- [ ] パフォーマンステストの実施
- [ ] セキュリティスキャンの完了
- [ ] ドキュメントの更新

### 8.2 モニタリング要件
- エラーレート監視
- レスポンスタイム監視
- リソース使用率監視